#!/bin/bash

set -e # exit on error

# cleanup -- delete temporary file
function cleanup {
    rm -f "${tmp_file}"
}
trap cleanup EXIT

#####################################################################################
# Default variables (search this file for "Post-processing defaults" to see others)
#####################################################################################
run_dir=$(pwd)
gpu=1
cpu=10
out="${HOME}/job_logs/%j.out"
partition="g5-queue2"
nodes=1
check=true
follow=true
cmd="sleep infinity"

#####################################################################################
# Usage
#####################################################################################
print_usage()
{
    echo "SLURM submit script for AWS cluster. Anything after the double hyphen will be executed as command in job."
    echo "  This could be \"python script.py\", for example."
    echo
    echo "Brief syntax:"
    echo "${0##*/} [OPTIONS(0)...] [ : [OPTIONS(N)...]] -- <cmd>"
    echo
    echo "Full syntax:"
    echo "${0##*/} [-h|--help] [-f|--follow <val>]"
    echo "                  [-d|--dir <val>] [-o|--out <val>]"
    echo "                  [-g|--gpu <val>] [-n,--cpu <val>]"
    echo "                  [-J|--name <val>] [-e|--exp <val>]"
    echo "                  [-N|--nodes <val>] [-C|--check <val>]"
    echo "                  [-p|--partition <val>] -- <cmd>"
    echo
    echo "options without args:"
    echo "-h, --help                : Print this help."
    echo
    echo "options with args:"
    echo "-d, --dir <val>           : Directory to run from. Default: \`pwd\`."
    echo "-g, --gpu <val>           : Num GPUs. Default: ${gpu}."
    echo "-n, --cpu <val>           : Num CPUs. Default: ${cpu}."
    echo "-J, --name <val>          : Job name. Default: \`<cmd>\` (with \`python \` stripped if present)."
    echo "-f, --follow <val>        : After submitting, follow job. Default: ${follow}."
    echo "-o, --out <val>           : File to save output. Default: \`$HOME/job_logs/%j.out\`."
    echo "                             %j is jobid. Folder will be created if necessary."
    echo "-N, --nodes <val>         : Number of nodes. Default: ${nodes}."
    echo "-C, --check <val>         : If true, and cmd is given, get filename and check it exists."
    echo "                             deleted? Default: ${check}."
    echo "-p, --partition <val>     : Partition to use. Default: ${partition}."
    echo
}

#####################################################################################
# Parse input arguments
#####################################################################################
while [[ $# -gt 0 ]]; do
    key="$1"
    shift
    if [ "$key" == "--" ]; then
        if [ "$#" -gt 0 ]; then
            cmd="$*"
        fi
        break
    fi
    case $key in
        -h|--help)
            print_usage
            exit 0
        ;;
        -d|--dir)
            run_dir=$1
            shift
        ;;
        -g|--gpu)
            gpu=$1
            shift
        ;;
        -n|--cpu)
            cpu=$1
            shift
        ;;
        -J|--name)
            job_name=$1
            shift
        ;;
        -f|--follow)
            follow="$1"
            shift
        ;;
        -o|--out)
            out=$1
            shift
        ;;
        -p|--partition)
            partition=$1
            shift
        ;;
        -N|--nodes)
            nodes=$1
            shift
        ;;
        -C|--check)
            check=$1
            shift
        ;;
        *)
            echo -e "\n\nUnknown argument: $key\n\n"
            print_usage
            exit 1
        ;;
    esac
done

#####################################################################################
# Post-process input arguments
#####################################################################################

# If partition is given, add to sbatch
if [ ! -z "$partition" ]; then
    partition_str="#SBATCH --partition=${partition}"
fi

log_fname=${out/\%j/${job_id}}
# default job name is cmd, with certain parts stripped.
default_job_name=$cmd
default_job_name=$(echo $default_job_name | sed -E -e 's/.*python//')
default_job_name=$(echo $default_job_name | sed -E -e 's/\.py//')
: ${job_name:=\"$default_job_name\"}

# Make sure output folder exists
mkdir -p "$(dirname "$out")"

# Print vals
echo
echo "Nodes: ${nodes}"
echo "Num GPUs: ${gpu}"
echo "Num CPUs: ${cpu}"
echo "Job name: ${job_name}"
echo "Log file: ${out}"
echo "Partition: ${partition}"
echo "Check?: ${check}"
echo "Follow?: ${follow}"
echo
echo "Path: ${run_dir}"
echo "Command: ${cmd}"
echo

#####################################################################################
# Check file exists in command
#####################################################################################
if [ "$check" = true ]; then
    # loop over each word in cmd
    for i in ${cmd}; do
        # if one contains .py, check file exists
        if [[ $i == *".py" ]]; then
            path="${run_dir}/$i"
            if [ ! -f "$path" ]; then
                echo "$path: does not exist. Use --check false if this is expected."
                exit 1
            fi
            break
        fi
    done
fi

#####################################################################################
# Create temporary submit file
#####################################################################################

# Create submit file (temp, deleted by cleanup function)
tmp_file=/tmp/tmp_submit_${RANDOM}.sh
cat > ${tmp_file} << EOL
#!/bin/zsh

#SBATCH --nodes=${nodes}
#SBATCH -J ${job_name}
#SBATCH --gres=gpu:${gpu}
${partition_str}
#SBATCH --chdir ${run_dir}
#SBATCH -n ${cpu}
#SBATCH --out ${out}

set -e # exit on error

echo hostname: \$(hostname)
echo IP address: \$(hostname -I)
echo user: \$(whoami)

echo -e "\nrunning ${cmd}"

${cmd} &
wait \$!
EOL

#####################################################################################
# Submit and print info
#####################################################################################

# Submit
sbatch_out=$(sbatch ${tmp_file})
sbatch_success=$?
# If successful, print job info
if [ "$sbatch_success" -eq 0 ]; then
    job_id=$(echo "$sbatch_out" | awk '{print $NF}')
    # print info about job
    scontrol show job "${job_id}"
fi
# Always print sbatch output
echo "${sbatch_out}"

# If successful and following desired
if [ "$sbatch_success" -eq 0 ] && [ "$follow" = true ]; then
    echo "Waiting for job to start..."
    log_fname=${out/\%j/${job_id}}
    while [ ! -f "$log_fname" ]; do
        sleep 1
    done
    tail -f "$log_fname"
fi
