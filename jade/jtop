#!/bin/bash

set -e # exit on error


#####################################################################################
# Default variables
#####################################################################################
loop=20
ascii=false

#####################################################################################
# Usage
#####################################################################################
print_usage()
{
    # Display Help
    echo "JADE usage monitoring averaged across the last hour. Probes on loop until Ctrl+C."
    echo
    echo "Brief syntax:"
    echo "${0##*/} [OPTIONS]"
    echo
    echo "Full syntax:"
    echo "${0##*/} [-h|--help] [-l|--loop <val>]"
    echo
    echo "options without args:"
    echo "-h, --help          : Print this help."
    echo "-a, --ascii         : Use ascii (no emojis)."
    echo
    echo "options with args:"
    echo "-l, --loop <val>    : Loop interval in seconds (default: ${loop})."
    echo
}


#####################################################################################
# Parse input arguments
#####################################################################################
while [[ $# -gt 0 ]]; do
    key="$1"
    shift
    case $key in
        -h|--help)
            print_usage
            exit 0
        ;;
        -a|--ascii)
            ascii=true
        ;;
        -l|--loop)
            loop=$1
            shift
        ;;
        *)
            echo -e "\n\nUnknown argument: $key\n\n"
            print_usage
            exit 1
        ;;
    esac
done


#####################################################################################
# Utility functions
#####################################################################################
# Repeat given char N times using shell function
repeat() {
    local val=$1
    local num=$2
    local range
	range=$(seq 1 "$num")
	for i in $range; do echo -n "${val}"; done
}

# colours
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NOCOLOR='\033[0m'

# colour thresholds
THRESH=(50 20)

# if percentage >= 50 green, elif >= 70 yellow, else red
set_colour() {
    local str
    local val
    local c
    str=$1
    val=$2
    if (( $(echo "$val >= ${THRESH[0]}" | bc -l) )); then
        c=$GREEN
    elif (( $(echo "$val >= ${THRESH[1]}" | bc -l) )); then
        c=$YELLOW
    else
        c=$RED
    fi
    echo "$c${str}$NOCOLOR"
}


#####################################################################################
# Get resource usage, create progress bar, get title
#####################################################################################

get_usage() {
    vals=$1
    name=$2
    partition=$3
    if [ "$name" == "GPU" ]; then
        alloc="AllocTRES[^ ]*(?<=gpu=)\K[0-9]+"
        total="CfgTRES[^ ]*(?<=gpu=)\K[0-9]+"
    elif [ "$name" == "CPU" ]; then
        alloc="CPUAlloc=\K[0-9]+"
        total="CPUTot=\K[0-9]+"
    fi
    if [ "$partition" != "total" ]; then
        partition="Partitions=.*$partition.* "
    else
        partition=""
    fi
    alloc_sum=$(echo "$vals" | grep "$partition" | grep -oP "$alloc" | paste -sd+ | bc -l)
    total_sum=$(echo "$vals" | grep "$partition" | grep -oP "$total" | paste -sd+ | bc -l)
    down_sum=$(echo "$vals" | grep "$partition" | grep Reason | grep -oP "$total" | paste -sd+ | bc -l)
    down_sum=${down_sum:-0}
    avail_sum=$(( total_sum - alloc_sum - down_sum ))
    echo "$total_sum" "$alloc_sum" "$down_sum" "$avail_sum"
}

FORMATS=("Alloc" "Down" "Avail")
NFORMAT="${#FORMATS[@]}"
printf -v FORMATS_COMMA_SEPARATED '%s,' "${FORMATS[@]}"
FORMATS_COMMA_SEPARATED=${FORMATS_COMMA_SEPARATED::-1}
# width is greater with ascii as emojis are bigger
if [ "$ascii" = true ]; then
    SYMBOLS="#â†“ "
    WIDTH=0.5
else
    SYMBOLS="ðŸ”ºðŸ’€ðŸŒ±"
    WIDTH=0.3
fi

get_bar() {
    # width of bar is fraction of terminal width
    w=$(printf "%.0f" "$(echo "scale=2; $(tput cols)*$WIDTH" | bc)")
    local partition=$1; shift
    local total=$1; shift
    local bar=""
    local legend=" "
    local sum=0
    for (( i=0; i<NFORMAT; i++ )); do
        val=$1; shift
        perc=$(printf "%.2f" "$(echo "scale=2; $val / $total * 100" | bc)")
        sum=$(printf "%.2f" "$(echo "scale=2; $sum + $perc" | bc)")
        if [ "$i" != $(( NFORMAT - 1 )) ]; then
            num_chars=$(printf "%.0f" "$(echo "scale=2; $w * $sum / 100 - ${#bar}" | bc)")
        else
            # for the last one, use the difference between current and desired
            # lengths so that we dont have any rounding errors
            num_chars=$(( w - ${#bar} ))
        fi
        n="${SYMBOLS:i:1}"
        if [ "$n" == " " ]; then n="Avail"; fi
        legend="${legend}$(printf "%s: %-5s" "$n" "$val")"
        bar="${bar}$(repeat "${SYMBOLS:i:1}" ${num_chars})"
    done
    # available is the last in the list
    avail=$perc
    legend="$legend Tot: $total"
    bar=$(set_colour "${bar}" "$avail")

    printf "%-5s |%s|%s" "$partition" "$bar" "$legend"
}

title() {
    local name="JADE usage"
    local offset=$(( $(tput cols) - ${#name} - 1 ))
    printf "%s %${offset}s\n" "$name" "$(date)"
}

gpu_queue() {
    local queue
    queue=$(sacct -aX --format="State%-7, Partition, ReqTRES%-100" | grep PENDING)
    echo "GPUs requested in queue:"
    for partition in total devel small big; do
        printf "  %-6s " "$partition:"
        if [ "$partition" == total ]; then
            partition=""
        fi
        echo "$queue" | grep "$partition" | grep -oP "gres/gpu=[0-9]+" | cut -d '=' -f 2 | paste -sd+ | bc -l
    done
}

diff_time() {
    local x1=$1
    local x2=$2
    local y1=${x1:0:4}
    local y2=${x2:0:4}
    local m1=${x1:5:2}
    local m2=${x2:5:2}
    local d1=${x1:8:2}
    local d2=${x2:8:2}
    local h1=${x1:11:2}
    local h2=${x2:11:2}
    local M1=${x1:14:2}
    local M2=${x2:14:2}
    local s1=${x1:17:2}
    local s2=${x2:17:2}
    local t
    t=$(( (y2-y1)*31557600 + (m2-m1) * 2629800 + (d2-d1) * 86400 + (h2-h1) * 3600 + (M2-M1) * 60 + (s2-s1) ))
    ds=$((t % 60))
    dM=$(((t / 60) % 60))
    dh=$(((t / 3600) % 24))
    dd=$(( t / (3600*24) ))
    printf "%02d-%02d:%02d:%02d\n" "$dd" "$dh" "$dM" "$ds"
}

queue_time() {
    local partition=$1
    local now
    local submit
    local expected_start
    now=$(date +%Y-%m-%dT%H:%M:%S)
    submit="$(sbatch --test-only --gres=gpu:1 -p "$partition" -t 00:10:00 --wrap "sleep infinity" 2>&1)"
    expected_start=$(echo "$submit" | grep -oP "[0-9]+\-[0-9]+-[0-9]+T[0-9]+:[0-9]+:[0-9]+")
    diff_time "$now" "$expected_start"
}


# #####################################################################################
# # Print info
# #####################################################################################
print() {
    output=$(scontrol -o show node)
    title
    for tres in GPU CPU; do
        echo $tres
        for partition in total devel small big; do
            usage=$(get_usage "$output" $tres $partition)
            echo -e "$(get_bar "$partition" $usage)"
        done
        echo
    done

    # legend
    echo -en "Legend:"
    for (( i=0; i<NFORMAT; i++ )); do
        echo -n "   ${FORMATS[$i]}: \"${SYMBOLS:i:1}\""
    done

    # colour (only if using ascii characters)
    if [ "$ascii" = true ]; then
        echo -en "\n          "
        echo -en "${GREEN}Green: >=${THRESH[0]}% avail${NOCOLOR}, "
        echo -en "${YELLOW}Yellow: ${THRESH[1]}-${THRESH[0]}% avail${NOCOLOR}, "
        echo -en "${RED}Red: <${THRESH[1]}% avail${NOCOLOR}"
    fi

    echo -e "\n"
    gpu_queue

    echo -e "\nEstimated queue times for 10 minute jobs (format: Days-HH:MM:SS)"
    echo "  Devel: $(queue_time devel)"
    echo "  Small: $(queue_time small)"
}

while true; do
    output="$(clear; print)"
    echo -e "$output"
    sleep "$loop"
done
