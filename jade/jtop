#!/bin/bash

set -e # exit on error


#####################################################################################
# Default variables
#####################################################################################
loop=1

#####################################################################################
# Usage
#####################################################################################
print_usage()
{
    # Display Help
    echo "JADE usage monitoring averaged across the last hour. Probes on loop until Ctrl+C."
    echo
    echo "Brief syntax:"
    echo "${0##*/} [OPTIONS]"
    echo
    echo "Full syntax:"
    echo "${0##*/} [-h|--help] [-l|--loop <val>]"
    echo
    echo "options without args:"
    echo "-h, --help          : Print this help."
    echo
    echo "options with args:"
    echo "-l, --loop <val>    : Loop interval in seconds (default: ${loop})."
    echo
}


#####################################################################################
# Parse input arguments
#####################################################################################
while [[ $# -gt 0 ]]; do
    key="$1"
    shift
    case $key in
        -h|--help)
            print_usage
            exit 0
        ;;
        -l|--loop)
            loop=$1
            shift
        ;;
        *)
            echo -e "\n\nUnknown argument: $key\n\n"
            print_usage
            exit 1
        ;;
    esac
done


#####################################################################################
# Utility functions
#####################################################################################
# Repeat given char N times using shell function
repeat() {
    local val=$1
    local num=$2
    local range
	range=$(seq 1 "$num")
	for i in $range; do echo -n "${val}"; done
}

# colours
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NOCOLOR='\033[0m'


# if percentage >= 50 green, elif >= 70 yellow, else red
set_colour() {
    local str
    local val
    local c
    str=$1
    val=$2
    if (( $(echo "$val >= 50" | bc -l) )); then
        c=$GREEN
    elif (( $(echo "$val >= 70" | bc -l) )); then
        c=$YELLOW
    else
        c=$RED
    fi
    echo "$c${str}$NOCOLOR"
}


#####################################################################################
# Get resource usage, create progress bar, get title
#####################################################################################

get_usage() {
    vals=$1
    name=$2
    if [ "$name" == "GPU" ]; then
        alloc="AllocTRES[^ ]*(?<=gpu=)\K[0-9]+"
        total="CfgTRES[^ ]*(?<=gpu=)\K[0-9]+"
    elif [ "$name" == "CPU" ]; then
        alloc="CPUAlloc=\K[0-9]+"
        total="CPUTot=\K[0-9]+"
    fi
    alloc_sum=$(echo "$vals" | grep -oP "$alloc" | paste -sd+ | bc -l)
    total_sum=$(echo "$vals" | grep -oP "$total" | paste -sd+ | bc -l)
    down_sum=$(echo "$vals" | grep Reason | grep -oP "$total" | paste -sd+ | bc -l)
    avail_sum=$(( total_sum - alloc_sum - down_sum ))
    echo "$name" "$total_sum" "$alloc_sum" "$down_sum" "$avail_sum"
}

FORMATS=("Alloc" "Down" "Avail")
NFORMAT="${#FORMATS[@]}"
printf -v FORMATS_COMMA_SEPARATED '%s,' "${FORMATS[@]}"
FORMATS_COMMA_SEPARATED=${FORMATS_COMMA_SEPARATED::-1}
SYMBOLS="#â†“ "

get_bar() {
    # width of bar is fraction of terminal width
    local w
    w=$(printf "%.0f" "$(echo "scale=2; $(tput cols)*0.5" | bc)")
    local name=$1
    shift
    local total=$1
    shift
    local bar=""
    local legend=" "
    for (( i=0; i<NFORMAT; i++ )); do
        val=$1; shift
        perc=$(printf "%.2f" "$(echo "scale=2; $val / $total * 100" | bc)")
        if [ "$i" != $(( NFORMAT - 1 )) ]; then
            num_chars=$(printf "%.0f" "$(echo "scale=2; $w * $perc / 100" | bc)")
            n="${SYMBOLS:i:1}"
        else
            # for the last one, use the difference between current and desired
            # lengths so that we dont have any rounding errors
            num_chars=$(( w - ${#bar} ))
            n="Avail"
        fi
        legend="${legend}$(printf "%s: %-5s" "$n" "$val")"
        bar="${bar}$(repeat "${SYMBOLS:i:1}" ${num_chars})"
    done
    # available is the last in the list
    avail=$perc
    legend="$legend Tot: $total"
    bar=$(set_colour "${bar}" "$avail")
    echo -e "${name}: |$bar|$legend"
}

title() {
    local name="JADE usage"
    local offset=$(( $(tput cols) - ${#name} - 1 ))
    printf "%s %${offset}s\n" "$name" "$(date)"
}


#####################################################################################
# Print info
#####################################################################################
print() {
    output=$(scontrol -o show node)
    gpu=$(get_bar $(get_usage "$output" GPU))
    cpu=$(get_bar $(get_usage "$output" CPU))

    title
    echo -e "$cpu"
    echo -e "$gpu"

    # legend
    echo -en "\nLegend:"
    for (( i=0; i<NFORMAT; i++ )); do
        echo -n "   ${FORMATS[$i]}: \"${SYMBOLS:i:1}\""
    done

    # colour
    echo -en "\n          "
    echo -en "${GREEN}Green: 50-100% avail${NOCOLOR}, "
    echo -en "${YELLOW}Yellow: 30-50% avail${NOCOLOR}, "
    echo -en "${RED}Red: <30% avail${NOCOLOR}"
}

while true; do
    output="$(clear; print)"
    echo -e "$output"
    sleep "$loop"
done
