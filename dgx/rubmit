#!/bin/bash

set -e # exit on error

#####################################################################################
# Default variables
#####################################################################################
run_dir=$(pwd)
default_cmd="sleep infinity"
gpu=1
im_name="${RUNAI_IM}"
default_job_name="${RUNAI_NAME}"
env_vars="${RUNAI_ENVS}"
local_pip_vars="${RUNAI_LOCAL_PIP}"
overwrite=False
check=True
follow=True
conda_env="${RUNAI_CONDA}"
ssh_port=30069

#####################################################################################
# Usage
#####################################################################################
print_usage()
{
    echo "Script to submit a runai job."
    echo
    echo "Brief syntax:"
    echo "${0##*/} [OPTIONS(0)...] [ : [OPTIONS(N)...]] [-- <cmd>]"
    echo
    echo "Full syntax:"
    echo "${0##*/} [-h|--help] [-f|--follow <val>] [-d|--dir <val>]"
    echo "                  [-g|--gpu <val>] [-n|--node <val>]"
    echo "                  [-j|--job-name <val>] [-i|--im-name <val>]"
    echo "                  [-e|--env <val>] [-o|--overwrite <val>]"
    echo "                  [-c|--check <val>] [-C|--conda <val>]"
    echo "                  [-s|--ssh] [-p|--port] [-- <cmd>]"
    echo
    echo "options without args:"
    echo "-h, --help                : Print this help."
    echo
    echo "options with args:"
    echo "-d, --dir <val>           : Directory to run from. Default: \`pwd\`."
    echo "-g, --gpu <val>           : Number of gpus to submit. Default: ${gpu}."
    echo "-n, --node <val>          : Node to run on. Default is any."
    echo "-j, --job-name <val>      : Name of submitted job. If not given, name"
    echo "                             will be taken from the command (with \`python \`"
    echo "                             removed). If default command has been used, name"
    echo "                             is taken from environment variable \`RUNAI_NAME\`."
    echo "                             If RUNAI_NAME missing, error."
    echo "-i, --im-name <val>       : Name of docker image to be run. Default from"
    echo "                             environment variable \`RUNAI_IM\`."
    echo "-e, --env <val>           : Comma-separated list of variables to copy"
    echo "                             from dgx to job. Default from"
    echo "                             environment variable \`RUNAI_ENVS\`."
    echo "-l, --local <val>         : Comma-separated list of directories to pip install"
    echo "                             inside job. Default from environment variable \`RUNAI_LOCAL_PIP\`."
    echo "-f, --follow <val>        : After submitting, follow job. Default: ${follow}."
    echo "-o, --overwrite <val>     : If job with same name exists, should it be"
    echo "                             deleted? Default: ${overwrite}."
    echo "-c, --check <val>         : If true, and cmd is given, get filename and check it exists."
    echo "                             deleted? Default: ${check}."
    echo "-C, --conda <val>         : Conda environment to use. If not given, use the \`RUNAI_CONDA\` env variable."
    echo "                             If \`RUNAI_CONDA\` does not exist, do not activate a conda environment."
    echo "-s, --ssh <val>           : Use SSH. Default: True if <cmd> blank, else False."
    echo "-p, --port <val>          : SSH port. Will use next available after given. Default: ${ssh_port}."
    echo
    echo "NB: if \`-- <cmd>\` not given, \`${default_cmd}\` is used."
}

#####################################################################################
# Parse input arguments
#####################################################################################
while [[ $# -gt 0 ]]; do
    key="$1"
    shift
    if [ "$key" == "--" ]; then
        if [ "$#" -gt 0 ]; then
            cmd="$*"
        fi
        break
    fi
    case $key in
        -h|--help)
            print_usage
            exit 0
        ;;
        -f|--follow)
            follow="$1"
            shift
        ;;
        -d|--dir)
            run_dir=$1
            shift
        ;;
        -g|--gpu)
            gpu=$1
            shift
        ;;
        -n|--node)
            node="--node-type $1"
            shift
        ;;
        -j|--job-name)
            job_name=$1
            shift
        ;;
        -i|--im-name)
            im_name=$1
            shift
        ;;
        -e|--env)
            env_vars="$1"
            shift
        ;;
        -l|--local)
            local_pip_vars="$1"
            shift
        ;;
        -o|--overwrite)
            overwrite="$1"
            shift
        ;;
        -c|--check)
            check="$1"
            shift
        ;;
        -C|--conda)
            conda_env=$1
            shift
        ;;
        -s|--ssh)
            use_ssh=$1
            shift
        ;;
        -p|--port)
            ssh_port=$1
            shift
        ;;
        *)
            echo -e "\n\nUnknown argument: $key\n\n"
            print_usage
            exit 1
        ;;
    esac
done

#####################################################################################
# Post-process input arguments
#####################################################################################
# if --ssh not used, set the default. True if -- <cmd> not used, else False
if [ "${use_ssh}" == "" ]; then
    if [ "${cmd}" == "" ]; then
        use_ssh=True
    else
        use_ssh=False
    fi
fi

# default command
: "${cmd:=$default_cmd}"

# if job name not given, figure one out
if [ "${job_name}" == "" ]; then
    if [ "${cmd}" != "${default_cmd}" ]; then
        job_name="${cmd}"
        # remove "python " and ".py"
        job_name="$(echo "$job_name" | sed -E -e 's/.*python//')"
        job_name="$(echo "$job_name" | sed -E -e 's/\.py//')"
        # remove dashes, and replace underscores and spaces with dashes
        job_name="${job_name//-/}"
        job_name="${job_name// /-}"
        job_name="${job_name//\_/-}"
    # else, use default job name from env var
    elif [ "${default_job_name}" != "" ]; then
        job_name="${default_job_name}"
    # if default command used and env var not set, error.
    else
        echo "Job name not given, default command used. Please set \`RUNAI_NAME\` for default job name."
        exit 1
    fi
fi

# get env vars and convert into "-e <KEY1>=<VALUE1> -e <KEY2>=<VALUE2>..."
if [ "${env_vars}" != "" ]; then
    # remove spaces from env list
    env_vars_str="${env_vars//[[:blank:]]/}"
    # split at commas and convert to array
    env_vars=($(echo $env_vars_str | tr "," "\n"))
    env_cmd=""
    for i in "${env_vars[@]}"; do
        env_cmd="${env_cmd} -e $i=${!i}"
    done
fi

# get local pip directories and convert to "-l <DIR1> -l <DIR2>..."
if [ "${local_pip_vars}" != "" ]; then
    # remove spaces from env list
    local_pip_vars_str="${local_pip_vars//[[:blank:]]/}"
    # split at commas and convert to array
    local_pip_vars=($(echo $local_pip_vars_str | tr "," "\n"))
    local_pip_cmd=""
    for i in "${local_pip_vars[@]}"; do
        local_pip_cmd="${local_pip_cmd} -l $i"
    done
fi

# Print vals
echo
echo "Num GPUs: ${gpu}"
echo "Requested node: ${node:-Any}"
echo "Job name: ${job_name}"
echo "Image name: ${im_name}"
echo "Env vars: ${env_vars_str}"
echo "Overwrite?: ${overwrite}"
echo "Check?: ${check}"
echo "Conda env: ${conda_env}"
echo "Use SSH: ${use_ssh}"
echo "SSH port: ${ssh_port}"
echo
echo "Path: ${run_dir}"
echo "Command: ${cmd}"
echo

#####################################################################################
# Check file exists in path
#####################################################################################
if [ "${check}" == True ]; then
    # loop over each word in cmd
    for i in ${cmd}; do
        # if one contains .py, check file exists
        if [[ $i == *".py" ]]; then
            path="${run_dir}/$i"
            if [ ! -f "$path" ]; then
                echo "$path: does not exist. Use --check False if this is expected."
                exit 1
            fi
            break
        fi
    done
fi

#####################################################################################
# Get ready to submit (get paths, delete prev. job if necessary)
#####################################################################################

# Get path to current file and move to current dir
script_path=$(realpath "$0")
script_dir=$(dirname "$script_path")
cd "$script_dir"

# Delete previously running job if one by same name exists
if [ "$overwrite" == True ]; then
    # use tail +3 to ignore first two lines of output (column headers)
    for i in $(runai list | tail +3 | awk '{print $1}'); do
        if [[ "$i" == "$job_name" ]]; then
            runai delete job "$job_name"
            sleep 3
        fi
    done
fi
# if json files from previous run, delete
param_file=~/Documents/Code/InstaVec/.progress/${job_name}.json
[ -f $param_file ] && rm $param_file

if [ "$use_ssh" == True ]; then
    ssh_args="--service-type=nodeport --port ${ssh_port}:2222"
else
    ssh_args=""
fi

#####################################################################################
# Submit job
#####################################################################################

runai submit --name "$job_name" ${ssh_args} \
    $node \
    -i "$im_name" \
    -g "$gpu" \
    --host-ipc \
    -v "${HOME}":"${HOME}" \
    --backoff-limit 0 \
    -- "${script_dir}"/runai_startup.sh ${env_cmd} ${local_pip_cmd} -d "${run_dir}" -C "${conda_env}" -- ${cmd}

#####################################################################################
# If desired, job status until RUNNING
#####################################################################################

if [ "${follow}" == True ]; then
    # Get job status
    function get_status {
        pat="status: ([a-zA-Z]*)"
        [[ $(runai describe job "$job_name" -o yaml) =~ $pat ]] 2> /dev/null
        echo "${BASH_REMATCH[1]}"
    }

    # Print the statuses until Running
    old_status=$(get_status)
    while true; do
        new_status=$(get_status)
        if [[ "$new_status" != "" && "$new_status" != "$old_status" ]]; then
            echo Job status: "$new_status"
            old_status="$new_status"
        fi
        if [[ "$new_status" == "Failed" || "$new_status" == "Succeeded" || "$new_status" == "Completed" ]]; then
            runai logs "$job_name"
            break
        elif [[ "$new_status" == "Running" ]]; then
            runai logs "${job_name}" -f
        fi
        sleep .5
    done
fi

# Terminal notification
echo -e "\a"
